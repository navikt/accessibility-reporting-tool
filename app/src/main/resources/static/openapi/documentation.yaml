openapi: "3.1.0"
info:
  title: "accessibility_reporting_tool API"
  description: "accessibility_reporting_tool API"
  version: "1.0.0"
servers:
- url: "https://accessibility_reporting_tool"
paths:
  /api/reports/{id}:
    get:
      description: ""
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                type: "string"
        "500":
          description: "Internal Server Error"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
                Example#2:
                  value: ""
                Example#3:
                  value: ""
                Example#4:
                  value: ""
        "404":
          description: "Not Found"
          content:
            text/plain:
              schema:
                type: "string"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/FullReportWithAccessPolicy"
  /api/reports/{id}/update:
    patch:
      description: ""
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReportUpdate"
        required: true
      responses:
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                type: "string"
        "500":
          description: "Internal Server Error"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
                Example#2:
                  value: ""
                Example#3:
                  value: ""
                Example#4:
                  value: ""
                Example#5:
                  value: ""
                Example#6:
                  value: ""
        "404":
          description: "Not Found"
          content:
            text/plain:
              schema:
                type: "string"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/FullReport"
    put:
      description: ""
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FullReport"
        required: true
      responses:
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                type: "string"
        "500":
          description: "Internal Server Error"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
                Example#2:
                  value: ""
                Example#3:
                  value: ""
                Example#4:
                  value: ""
                Example#5:
                  value: ""
                Example#6:
                  value: ""
        "404":
          description: "Not Found"
          content:
            text/plain:
              schema:
                type: "string"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/FullReport"
  /api/reports/list:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/ReportListItem"
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                type: "string"
        "500":
          description: "Internal Server Error"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
                Example#2:
                  value: ""
                Example#3:
                  value: ""
  /api/reports/new:
    post:
      description: ""
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Rapport"
        required: true
      responses:
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                type: "string"
        "500":
          description: "Internal Server Error"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
                Example#2:
                  value: ""
        "200":
          description: "OK"
          content:
            text/plain:
              schema:
                type: "string"
  /api/teams:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/TeamSummary"
  /api/teams/{id}/details:
    get:
      description: ""
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                type: "string"
        "500":
          description: "Internal Server Error"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
                Example#2:
                  value: ""
        "404":
          description: "Not Found"
          content:
            text/plain:
              schema:
                type: "string"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/OrganizationUnit"
  /api/teams/{id}/reports:
    get:
      description: ""
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                type: "string"
        "500":
          description: "Internal Server Error"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
                Example#2:
                  value: ""
                Example#3:
                  value: ""
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/ReportListItem"
  /api/teams/{id}/update:
    put:
      description: ""
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TeamUpdate"
        required: true
      responses:
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                type: "string"
        "500":
          description: "Internal Server Error"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
                Example#2:
                  value: ""
                Example#3:
                  value: ""
                Example#4:
                  value: ""
                Example#5:
                  value: ""
                Example#6:
                  value: ""
        "404":
          description: "Not Found"
          content:
            text/plain:
              schema:
                type: "string"
        "200":
          description: "OK"
  /api/teams/new:
    post:
      description: ""
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewTeam"
        required: true
      responses:
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                type: "string"
        "500":
          description: "Internal Server Error"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
                Example#2:
                  value: ""
                Example#3:
                  value: ""
                Example#4:
                  value: ""
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
  /api/users/details:
    get:
      description: ""
      responses:
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                type: "string"
        "500":
          description: "Internal Server Error"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
                Example#2:
                  value: ""
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserDetails"
components:
  schemas:
    OrganizationUnit:
      type: "object"
      properties:
        id:
          type: "string"
        name:
          type: "string"
        email:
          type: "string"
        members:
          type: "array"
          items:
            type: "string"
      required:
      - "id"
      - "name"
      - "email"
      - "members"
    Author:
      type: "object"
      properties:
        email:
          type: "string"
        oid:
          type: "string"
      required:
      - "email"
      - "oid"
    SuccessCriterion:
      type: "object"
      properties:
        name:
          type: "string"
        description:
          type: "string"
        principle:
          type: "string"
        guideline:
          type: "string"
        tools:
          type: "string"
        number:
          type: "string"
        breakingTheLaw:
          type: "string"
        lawDoesNotApply:
          type: "string"
        tooHardToComply:
          type: "string"
        contentGroup:
          type: "string"
        status:
          type: "string"
          enum:
          - "COMPLIANT"
          - "NON_COMPLIANT"
          - "NOT_APPLICABLE"
          - "NOT_TESTED"
        wcagUrl:
          type: "string"
        helpUrl:
          type: "string"
        wcagVersion:
          type: "string"
        wcagLevel:
          type: "string"
          enum:
          - "A"
          - "AA"
          - "AAA"
          - "UNKNOWN"
        successCriterionNumber:
          type: "string"
      required:
      - "name"
      - "description"
      - "principle"
      - "guideline"
      - "tools"
      - "number"
      - "breakingTheLaw"
      - "lawDoesNotApply"
      - "tooHardToComply"
      - "contentGroup"
      - "status"
      - "wcagVersion"
      - "successCriterionNumber"
    FullReportWithAccessPolicy:
      type: "object"
      properties:
        reportId:
          type: "string"
        descriptiveName:
          type: "string"
        url:
          type: "string"
        team:
          $ref: "#/components/schemas/OrganizationUnit"
        author:
          $ref: "#/components/schemas/Author"
        successCriteria:
          type: "array"
          items:
            $ref: "#/components/schemas/SuccessCriterion"
        created:
          type: "string"
          format: "date-time"
        lastChanged:
          type: "string"
          format: "date-time"
        hasWriteAccess:
          type: "boolean"
      required:
      - "reportId"
      - "url"
      - "author"
      - "successCriteria"
      - "created"
      - "lastChanged"
    SuccessCriterionUpdate:
      type: "object"
      properties:
        number:
          type: "string"
        breakingTheLaw:
          type: "string"
        lawDoesNotApply:
          type: "string"
        tooHardToComply:
          type: "string"
        contentGroup:
          type: "string"
        status:
          type: "string"
      required:
      - "number"
    ReportUpdate:
      type: "object"
      properties:
        descriptiveName:
          type: "string"
        team:
          $ref: "#/components/schemas/OrganizationUnit"
        author:
          $ref: "#/components/schemas/Author"
        created:
          type: "string"
        lastChanged:
          type: "string"
        successCriteria:
          type: "array"
          items:
            $ref: "#/components/schemas/SuccessCriterionUpdate"
    FullReport:
      type: "object"
      properties:
        reportId:
          type: "string"
        descriptiveName:
          type: "string"
        url:
          type: "string"
        team:
          $ref: "#/components/schemas/OrganizationUnit"
        author:
          $ref: "#/components/schemas/Author"
        successCriteria:
          type: "array"
          items:
            $ref: "#/components/schemas/SuccessCriterion"
        created:
          type: "string"
          format: "date-time"
        lastChanged:
          type: "string"
          format: "date-time"
      required:
      - "reportId"
      - "url"
      - "author"
      - "successCriteria"
      - "created"
      - "lastChanged"
    ReportListItem:
      type: "object"
      properties:
        reportId:
          type: "string"
        descriptiveName:
          type: "string"
        url:
          type: "string"
        teamId:
          type: "string"
        teamName:
          type: "string"
        lastChanged:
          type: "string"
          format: "date-time"
      required:
      - "reportId"
      - "url"
      - "teamId"
      - "teamName"
      - "lastChanged"
    Rapport:
      type: "object"
      properties:
        name:
          type: "string"
        urlTilSiden:
          type: "string"
        teamId:
          type: "string"
      required:
      - "name"
      - "urlTilSiden"
      - "teamId"
    TeamSummary:
      type: "object"
      properties:
        id:
          type: "string"
        name:
          type: "string"
        email:
          type: "string"
      required:
      - "id"
      - "name"
      - "email"
    TeamUpdate:
      type: "object"
      properties:
        id:
          type: "string"
        name:
          type: "string"
        email:
          type: "string"
        members:
          type: "array"
          items:
            type: "string"
      required:
      - "id"
    NewTeam:
      type: "object"
      properties:
        name:
          type: "string"
        email:
          type: "string"
        members:
          type: "array"
          items:
            type: "string"
      required:
      - "name"
      - "email"
      - "members"
    UserDetails:
      type: "object"
      properties:
        name:
          type: "string"
        email:
          type: "string"
        reports:
          type: "array"
          items:
            $ref: "#/components/schemas/ReportListItem"
        teams:
          type: "array"
          items:
            $ref: "#/components/schemas/OrganizationUnit"
      required:
      - "name"
      - "email"
      - "reports"
      - "teams"